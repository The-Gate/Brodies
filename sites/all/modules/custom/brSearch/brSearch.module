<?php

/**
 * Implementation of hook_menu().
 */
function brSearch_menu() {

  $items['search'] = array(
    'title' => 'Search results',
    'page callback' => 'brSearch_search_page',
    'page arguments' => array(1,2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function brSearch_theme() {
  return array(
    'brSearch_ajax_search' => array('element' => array()),
  );
}

function theme_brSearch_ajax_search($element) {
  drupal_add_js(drupal_get_path("module", "br") . '/JS/ajax_search.js');

  $class[] = 'ajax_search_input';
  _form_set_class($element, $class);

  return '<div id="' . $element['']['#id'] . '-rgid-wrapper" class="relative" ' . $element['']['#wrapper_style'] . '>' .
      '<input type="text" ' . ($element['']['#maxlength'] ? ' maxlength="' . $element['']['#maxlength'] . '"' : '') . ' name="' . $element['']['#name'] . '" id="' . $element['']['#id'] . '" value="' . check_plain($element['']['#default_value']) . '"' . drupal_attributes($element['']['#attributes']) . ' />' .
      '<input type="hidden" value="' . $element['']['#ajax_search_path'] . '" id="' . $element['']['#id'] . '-ajax-search" class="ajax_search" />' .
      '<input type="hidden" value="' . $element['']['#flyout_margin'] . '" id="' . $element['']['#id'] . '-flyout-margin" />' .
      '</div>' .
      '<div id="' . $element['']['#id'] . '-header-text" class="hide">' . $element['']['#header_text'] . '</div>';
}

/**
 * Implements hook_block_info().
 */
function brSearch_block_info() {
  $blocks = array();
  $blocks['brSearch_autocomplete_search'] = array(
    'info' => t('Autocomplete Search'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function brSearch_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'brSearch_autocomplete_search' :
      drupal_add_js(drupal_get_path('module', 'br') . '/JS/ajax_search.js');
      $form = drupal_get_form('brSearch_global_search_form',1);
      $block['content'] = '<div id="search">' . drupal_render($form) . '</div>';
      break;
  }

  return $block;
}

function brSearch_global_search_form() {
  $form['search'] = array(
    '#type' => 'textfield',
    '#theme' => 'brSearch_ajax_search',
    '#attributes' => array('title' => 'search', 'class' => array('start_clear')),
    '#default_value' => 'search',
    '#ajax_search_path' => 'search',
    '#flyout_margin' => 0,
  );
  $form['#submit'][] = 'event_signup_form_submit';
  $form['#attributes'] = array('class' => 'search_form');
  return $form;
}

function brSearch_global_search_form_submit($form, &$form_state, $argument) {
// This is now triggered
}

function brSearch_search_page($keyword = '') {
  global $user;

  if (strlen($keyword) < 2) {
    $html = 'Enter at least 2 characters';
  }
  else {
    $max = 4;

    $result_array = array();

    $args = array($keyword, $keyword);
    $result = db_query("SELECT n.nid, n.title, fdb.body_value, n.type 
      FROM node n                              
      LEFT JOIN node_revision r ON r.vid = n.vid    
      LEFT JOIN field_data_body fdb ON fdb.revision_id = r.vid                                            
      WHERE (n.title LIKE '%s%%' OR fdb.body_value LIKE '%%%s%%')                                     
      ORDER BY n.title ASC
              ", $args);

    $count = 0;
    $item_keywords = array();
    while ($data = db_fetch_object($result)) {
      $nid = $data->nid;
      if (count($result_array[$data->type]) < $max) {
        $result_array[$data->type][$nid] = array($data->type, $data->title, strip_tags($data->body));
      }
    }
    $html = '<div class="search-results">';

    if (!count($result_array)) {
      $html .= t('No results found for keyword "@keyword"', array('@keyword' => $keyword));
    }
    else {
      $content_data = array(
        'page' => t('Pages'), #
        'overview' => t('Pages'), #
        'news' => t('News'), #
        'service' => t('Services'), #
        'sector' => t('Sectors'), #
        'cs' => t('Case studies'), #
        'career' => t('Career Opportunities'), #
        'event' => t('Events & Seminars'), #
        'lupdate' => t('Legal Updates'), #
        'people' => t('People'), #
        'publication' => t('Publications Archive'), #
        'video' => t('Videos'),
      );

      //crns_highlight_search_text
      foreach ($content_data as $type => $name) {
        if (!count($result_array[$type])) {
          continue;
        }

        $html .= '<h2>' . $name . '</h2>' . '<ul>';

        foreach ($result_array[$type] as $key => $result) {
          switch ($type) {
            default:
              $html .= '<li><div searchlink="' . url('node/' . $key) . '">' . l(br_search_text($result[1], $keyword, 0, TRUE), 'node/' . $key, array('html' => TRUE)) . '</div><div class="desc">' . br_search_text($result[2], $keyword, 50) . '</div></li>';
              break;
            case 'publication':
              $filename = db_result(db_query("SELECT f.filepath FROM {content_type_publication} p INNER JOIN {node} n on n.vid = p.vid LEFT JOIN {files} f on f.fid = field_p_file_fid WHERE p.nid = %d", $key));
              $html .= '<li><div searchlink="' . url($filename) . '">' . l(br_search_text($result[1], $keyword, 0, TRUE), $filename, array('html' => TRUE)) . '</div><div class="desc">' . br_search_text($result[2], $keyword, 50) . '</div></li>';
              break;
            case 'video':
              $data = db_fetch_object(db_query("SELECT field_video_url_value, filepath FROM {content_type_video} p INNER JOIN {node} n on n.vid = p.vid LEFT JOIN {content_field_teaser_image} ti on ti.vid = n.vid LEFT JOIN {files} f on f.fid = field_teaser_image_fid WHERE p.nid = %d", $key));
              $image = '&nbsp;';
              $vdata = br_get_video_data($data->field_video_url_value, $data->filepath ? '/' . $data->filepath : '');

              $html .= '<li><div searchlink="' . url($data->field_video_url_value) . '">' . l(br_search_text($result[1], $keyword, 0, TRUE), $data->field_video_url_value, array('html' => TRUE)) . '</div><div class="desc">' . br_search_text($result[2], $keyword, 50) . '</div></li>';
              break;
          }
        }

        $html .= '</ul>';
      }
    }

    $html .= '</div>';
  }

  $matches[1] = $html;

  if (!br_popup_request_check()) {
    return $html;
  }
  else {
    print drupal_to_js($matches);
    exit();
  }
}

function br_search_text($text, $keyword, $cut = 0, $leave_result = FALSE) {
  $return_text = '';
  $text = strip_tags($text);
  //find the first occurence  
  $first_place = mb_strpos(drupal_strtolower($text), drupal_strtolower($keyword));

  if ($first_place !== FALSE) {
    $keyword_length = drupal_strlen($keyword);
    $left_text = '';
    $right_text = '';

    $return_text .= drupal_substr($text, 0, $first_place) . '<strong>' . drupal_substr($text, $first_place, drupal_strlen($keyword)) . '</strong>' . drupal_substr($text, $first_place + drupal_strlen($keyword), (drupal_strlen($text) - ($first_place + drupal_strlen($keyword))));
  }
  else {
    if ($leave_result == TRUE) {
      return $text;
    }
    else {
      return '';
    }
  }

  if ($cut) {
    $keyword = '<strong>' . $keyword . '</strong>';
    //strong open and close
    $cut = $cut + 17;
    $first_place = mb_strpos(drupal_strtolower($return_text), drupal_strtolower($keyword));
    if ($cut < drupal_strlen($keyword)) {
      $start_cut = $first_place;
      $cut = drupal_strlen($keyword);
    }
    else {
      $start_cut = $first_place - round((($cut - drupal_strlen($keyword)) / 2), 0);

      if ($start_cut < 0)
        $start_cut = 0;
    }

    if ($start_cut > 0) {
      $left_text = '...';
    }

    if (($start_cut + $cut) < drupal_strlen($return_text)) {
      $right_text = '...';
    }

    $return_text = $left_text . drupal_substr($return_text, $start_cut, $cut) . $right_text;
  }

  return $return_text;
}

function br_popup_request_check() {
  return
      (isset($_SERVER['HTTP_X_DRUPAL_RENDER_MODE']) && $_SERVER['HTTP_X_DRUPAL_RENDER_MODE'] == 'json/popups')
  ;
}
