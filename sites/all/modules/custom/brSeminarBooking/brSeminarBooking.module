<?php

// set test email addresses
define("SEMINAR_EMAIL_TEST", false);

/**
 * Implements hook_block_info().
 */
function brSeminarBooking_block_info() {
  $blocks = array();
  $blocks['seminar_checkout'] = array(
    'info' => t('Seminars & Events : CHECKOUT'),
  );
  $blocks['seminar_waitinglist'] = array(
    'info' => t('Seminars & Events : WAITING LIST'),
  );
  $blocks['seminar_calendar'] = array(
    'info' => t('Seminars & Events : Calendar Links'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function brSeminarBooking_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'seminar_checkout' :
      $block['content'] = brSeminarBooking_events_checkout();
      break;
    case 'seminar_waitinglist' :
      $block['content'] = brSeminarBooking_events_waitinglist();
      break;
    case 'seminar_calendar' :
      $block['content'] = brSeminarBooking_calendar_links();
      break;
  }

  return $block;
}

function brSeminarBooking_menu() {
  $items['seminars-and-events/checkout'] = array(
    'title' => 'Seminar Checkout',
    'page callback' => 'brSeminarBooking_page_seminars_checkout',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['seminars-and-events/waitinglist'] = array(
    'title' => 'Add to waiting List',
    'page callback' => 'brSeminarBooking_page_seminars_waitinglist',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////////  CHECKOUT ///////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

function brSeminarBooking_book_link($data) {
  if (!empty($_SESSION['seminars'][$data->nid])) {
    $title = 'remove';
  }
  else {
    // if no date, change button title
    if (isset($data->field_event_date[LANGUAGE_NONE][0]['value'])) {
      $title = 'Book Now';
    }
    else {
      $title = 'Register Interest';
    }
  }
  return '<div class="seminar-buttons  col-md-3"><div class="seminar-button add">' . l(
          $title, $_GET['q'], array(
        'attributes' => array(
          'class' => array(
            'book',
          ),
        ),
        'query' => array(
          'book-seminar' => $data->nid,
          drupal_get_destination()
        ),
          )
      ) . '</div></div>';
}

/**
 * add user to the seminar list
 * @return string
 */
function brSeminarBooking_events_checkout() {
  if (isset($_GET['clear'])) {
    unset($_SESSION['seminars']);
    drupal_goto();
  }
  if (isset($_GET['book-seminar'])) {

// make sure there is a seminar matching this nid
    $query = db_select('node', 'n');
    $query->join('field_data_field_event_type', 'e', 'e.revision_id = n.vid WHERE (field_event_type_value = \'seminar\' OR field_event_type_value = \'webinar\') AND n.nid = :nid', array(':nid' => $_GET['book-seminar']));

    $count = $query->countQuery()->execute()->fetchField();

    if ((int) $count == 1) {
      if (isset($_SESSION['seminars'][$_GET['book-seminar']])) {
        unset($_SESSION['seminars'][$_GET['book-seminar']]);
      }
      else {
        $_SESSION['seminars'][$_GET['book-seminar']] = $_GET['book-seminar'];
      }
      drupal_goto();
    }
  }
  $nr = isset($_SESSION['seminars']) ? count($_SESSION['seminars']) : 0;
  $out = '<div class="seminar-button checkout"><div class="basket-title">';
  $out .= $nr ? l('Seminar Basket', 'seminars-and-events/checkout', array('attributes' => array('class' => array('checkout')))) : 'Seminar Basket';
  $out .= '</div><div class="basket-items"><i class="fa fa-shopping-basket" aria-hidden="true"></i><div class="item-wrapper">';
  $out .= $nr ? l($nr, 'seminars-and-events/checkout', array('attributes' => array('class' => array('checkout')))) .
      l('X', $_GET['q'], array('attributes' => array('class' => array('clear')), 'query' => array('clear' => TRUE, drupal_get_destination()))) : '<div class="checkout">' . $nr . '</div>';
  $out .= '</div></div></div>';
  return $out;
}

function brSeminarBooking_page_seminars_checkout() {
  $out = '<div class="node">';

  if (!empty($_SESSION['seminars']) and count($_SESSION['seminars'])) {
    $sdata = $_SESSION['seminars'];
    $out .= '<p>You are about to book ' . format_plural(count($sdata), 'a place', 'places') . ' on the following ' . format_plural(count($sdata), 'seminar', 'seminars') . '</p>';
    $out .= '<div class="seminars" style="margin-bottom:30px;">';
    $nodes = node_load_multiple($sdata);
    foreach ($nodes as $nid => $node) {
      //set location
      $locationTitle = _getLocation($node->field_event_location[LANGUAGE_NONE][0]['nid']);
      // set date
      $dateTitle = _getDate($node->field_event_date[LANGUAGE_NONE][0]['value']);
      $out .= '<div class="col-sm-9"><p><strong>' . l($node->title, 'node/' . $nid) . '</strong><br>Location: ' . $locationTitle . '<br>Date: ' . $dateTitle . '</p></div>' . brSeminarBooking_book_link((object) array('nid' => $nid));
    }
    $out .= '<div class="clearfix"></div></div>';
    $out .= '<p>Please remove any seminars that you are no longer interested in and complete the form below to book your ' . format_plural(count($sdata), 'place', 'places') . '.</p>';
    $chform = drupal_get_form('brSeminarBooking_seminars_form');
    $out .= render($chform);
  }
  else {
    $out .= 'No seminars selected yet';
  }
  $out .= '</div>';

  return $out;
}

function brSeminarBooking_seminars_form() {

  $form['intro'] = array('#markup' => '<hr><h2>Your details</h2><p>Fields marked with <span class="form-required">*</span> are required.</p>');
  $form['#attributes'] = array('class' => 'custom-seminar-form');
  $form['first-name'] = array(
    '#type' => 'textfield',
    '#title' => 'First name',
    '#required' => TRUE,
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
//    '#default_value' => 'First name',
  );

  $form['surname'] = array(
    '#type' => 'textfield',
    '#title' => 'Surname',
    '#required' => TRUE,
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
//    '#default_value' => 'Surname',
  );

  $form['position'] = array(
    '#type' => 'textfield',
    '#title' => 'Position',
    '#required' => TRUE,
    '#prefix' => '<div class="col-md-12">',
    '#suffix' => '</div>',
//    '#default_value' => 'Position',
  );

  $form['company'] = array(
    '#type' => 'textfield',
    '#title' => 'Company',
    '#required' => TRUE,
    '#prefix' => '<div class="col-md-12">',
    '#suffix' => '</div>',
//    '#default_value' => 'Company',
  );

  $form['address-line-1'] = array(
    '#type' => 'textfield',
    '#title' => 'Address Line 1',
    '#required' => TRUE,
    '#prefix' => '<div class="col-md-12">',
    '#suffix' => '</div>',
//    '#default_value' => 'Address Line 1',
  );

  $form['address-line-2'] = array(
    '#type' => 'textfield',
    '#title' => 'Address Line 2',
    '#prefix' => '<div class="col-md-12">',
    '#suffix' => '</div>',
//    '#default_value' => 'Address Line 2',
  );

  $form['address-line-3'] = array(
    '#type' => 'textfield',
    '#title' => 'Address Line 3',
    '#prefix' => '<div class="col-md-12">',
    '#suffix' => '</div>',
//    '#default_value' => 'Address Line 3',
  );

  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => 'City',
    '#required' => TRUE,
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
//    '#default_value' => 'City',
  );

  $form['postcode'] = array(
    '#type' => 'textfield',
    '#title' => 'Postcode',
    '#required' => TRUE,
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
//    '#default_value' => 'Postcode',
  );

  $form['telephone-number'] = array(
    '#type' => 'textfield',
    '#title' => 'Telephone Number',
    '#description' => 'For text alerts regarding your seminar booking, please enter your mobile number.',
    '#required' => TRUE,
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
//    '#default_value' => 'Telephone Number',
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => 'Email',
    '#required' => TRUE,
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
//    '#default_value' => 'test@test.com',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

function brSeminarBooking_seminars_form_validate($form_state, $form_values) {
  $email = $form_values['values']['email'];

  if (!valid_email_address($email)) {
    form_set_error('email', 'Enter valid email address');
  }
}

function brSeminarBooking_seminars_form_submit($form_state, $form_values) {
  if (SEMINAR_EMAIL_TEST == true) {
    $admin_email = 'callum@sakurabrae.co.uk';
  }
  else {
    $admin_email = 'seminars@brodies.com';
  }
  $values = $form_values['values'];
  $seminarBooking = false;
  $webinarBooking = false;
  $emailtxtSeminarOnly = "<p>Thank you for booking the following:</p>";
  $emailtxtWebinarOnly = "<p>Thank you for booking the following:</p>";
  $emailtxtSeminarWebinar = "<p>Thank you for booking the following:</p>";

//send email
//$form_values['values']['submission-time'] = date("Y-m-d H:i", time());
  $from = $values['email'];
  // email content to Brodies admin
  $admin_out = '';
  // email content to the user
  $client_out = '';
  // table data used in both
  $table_out = '';

  $admin_out .= '<!DOCTYPE html><html><head><title>Seminar Booking Request</title></head><body>';
  $client_out .= '<!DOCTYPE html><html><head><title>Seminar Booking</title></head><body>';

  $admin_out .= '<p>' . $values['first-name'] . " " . $values['surname'] . " from IP address " . $_SERVER['REMOTE_ADDR'] . " on " . date("Y-m-d H:i", time()) . " booked the following seminars:</p>";
  $client_out .= '<p>Hi ' . $values['first-name'] . " " . $values['surname'] . ",</p>";

  $table_out .= "<table border='1'><tr><td>Name</td><td>Location</td><td>Time & Date</td><td>Places</td></tr>";

  $nodes = node_load_multiple($_SESSION['seminars']);
  foreach ($nodes as $row) {
    // get type
    switch ($row->field_event_type[LANGUAGE_NONE][0]['value']) {
      case 'seminar':
        $seminarBooking = true;
        break;

      case 'webinar':
        $webinarBooking = true;
        break;
    }
    //set location
    $locationTitle = _getLocation($row->field_event_location[LANGUAGE_NONE][0]['nid']);
    // set date
    $dateTitle = _getDate($row->field_event_date[LANGUAGE_NONE][0]['value']);

    $table_out .= "<tr>";
    $table_out .= "<td>" . l($row->title, 'node/' . $row->nid, array('absolute' => TRUE)) . "</td>";
    $table_out .= "<td>" . $locationTitle . "</td>";
    $table_out .= "<td>" . $dateTitle;
    if (isset($row->field_event_date[LANGUAGE_NONE][0]['value2'])) {
      $table_out .= ' - ' . date('d M Y H:i', $row->field_event_date[LANGUAGE_NONE][0]['value2']);
    }
    $table_out .= "</td>";
    $table_out .= "<td>1</td></tr>";
  }

  $table_out .= "</table><br><br>";
  $table_out .= '<b>Lead Delegate</b><br>
<br>
<table border="1" width="100%">
<tbody>
<tr>
<td width="50%">Name:</td>
<td width="50%">' . $values['first-name'] . " " . $values['surname'] . '</td>
</tr>
<tr>
<td>Email:</td>
<td>' . $values['email'] . '</td>
</tr>
<tr>
<td>Contact Telephone Number:</td>
<td>' . $values['telephone-number'] . '</td>
</tr>
<tr>
<td>Position:</td>
<td>' . $values['position'] . '</td>
</tr>
<tr>
<td>Company:</td>
<td>' . $values['company'] . '</td>
</tr>
<tr>
<td>Address Line 1:</td>
<td>' . $values['address-line-1'] . '</td>
</tr>
<tr>
<td>Address Line 2:</td>
<td>' . $values['address-line-2'] . '</td>
</tr>
<tr>
<td>Address Line 3:</td>
<td>' . $values['address-line-3'] . '</td>
</tr>
<tr>
<td>City:</td>
<td>' . $values['city'] . '</td>
</tr>
<tr>
<td>Postcode:</td>
<td>' . $values['postcode'] . '</td>
</tr>
</tbody>
</table></body></html>';

  $admin_out .= $table_out;
  if ($seminarBooking and $webinarBooking) {
    $client_out .= $emailtxtSeminarWebinar;
  }
  elseif ($seminarBooking and ! $webinarBooking) {
    $client_out .= $emailtxtSeminarOnly;
  }
  elseif (!$seminarBooking and $webinarBooking) {
    $client_out .= $emailtxtWebinarOnly;
  }

  $client_out .= $table_out;
  $admin_params = array(
    'body' => $admin_out,
    'subject' => 'Seminar Booking Request',
  );
  $client_params = array(
    'body' => $client_out,
    'subject' => 'Seminar Bookings',
  );
  if (drupal_mail('brSeminarBooking_seminars_form', 'seminars-checkout-admin', $admin_email, language_default(), $admin_params, $from, TRUE) &&
      drupal_mail('brSeminarBooking_seminars_form', 'seminars-checkout-admin', $from, language_default(), $client_params, $admin_email, TRUE)) {
    unset($_SESSION['seminars']);
//redirect to thank you
    $_REQUEST['destination'] = 'thank-you-checkout';
    drupal_goto('thank-you-checkout');
  }
  else {
    drupal_set_message('There was an error subscribing you. Please try again later');
  }
}

function brSeminarBooking_seminars_form_mail($key, &$message, $params) {
  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8;',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal'
  );

  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }

  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////////  WAITING LIST //////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

function brSeminarBooking_waitinglist_link($data) {
  if (!empty($_SESSION['seminars-waitinglist'][$data->nid])) {
    $title = 'remove';
  }
  else {
    $title = 'Join waiting list';
  }
  return '<div class="seminar-buttons col-md-6"><div class="col-md-6"><div class="seminar-button warning">Fully Booked</div></div><div class="col-md-6"><div class="seminar-button waitlist link">' . l(
          $title, $_GET['q'], array(
        'attributes' => array(
          'class' => array(
            'book',
          ),
        ),
        'query' => array(
          'seminars-waitinglist' => $data->nid,
          drupal_get_destination()
        ),
          )
      ) . '</div></div></div>';
}

/**
 * add user to the waiting list
 * @return string
 */
function brSeminarBooking_events_waitinglist() {
  if (isset($_GET['list-clear'])) {
    unset($_SESSION['seminars-waitinglist']);
    drupal_goto();
  }
  if (isset($_GET['seminars-waitinglist'])) {

// make sure there is a seminar matching this nid
    $query = db_select('node', 'n');
    $query->join('field_data_field_event_type', 'e', 'e.revision_id = n.vid WHERE (field_event_type_value = \'seminar\' OR field_event_type_value = \'webinar\')AND n.nid = :nid', array(':nid' => $_GET['seminars-waitinglist']));
    $count = $query->countQuery()->execute()->fetchField();

    if ((int) $count == 1) {
      if (isset($_SESSION['seminars-waitinglist'][$_GET['seminars-waitinglist']])) {
        unset($_SESSION['seminars-waitinglist'][$_GET['seminars-waitinglist']]);
      }
      else {
        $_SESSION['seminars-waitinglist'][$_GET['seminars-waitinglist']] = $_GET['seminars-waitinglist'];
      }
      drupal_goto();
    }
  }
  $nr = isset($_SESSION['seminars-waitinglist']) ? count($_SESSION['seminars-waitinglist']) : 0;
  $out = '<div class="seminar-button waitlist"><div class="basket-title">';

  $out .= $nr ? l('Waiting list', 'seminars-and-events/waitinglist', array('attributes' => array('class' => array('checkout')))) : 'Waiting list';
  $out .='</div><div class="basket-items"><i class="fa fa-shopping-basket" aria-hidden="true"></i><div class="item-wrapper">';
  $out .= $nr ? l($nr, 'seminars-and-events/waitinglist', array('attributes' => array('class' => array('checkout')))) .
      l('X', $_GET['q'], array('attributes' => array('class' => array('list-clear')), 'query' => array('list-clear' => TRUE, drupal_get_destination()))) : '<div class="checkout">' . $nr . '</div>';
  $out .= '</div></div></div>';
  return $out;
}

function brSeminarBooking_page_seminars_waitinglist() {

  $out = '<div class="node">';
  if (!empty($_SESSION['seminars-waitinglist']) and count($_SESSION['seminars-waitinglist'])) {
    $sdata = $_SESSION['seminars-waitinglist'];
    $out .= '<p>You are about to add to the waiting list on the following ' . format_plural(count($sdata), 'seminar', 'seminars') . '</p>';
    $out .= '<div class="seminars" style="margin-bottom:30px;">';
    $nodes = node_load_multiple($sdata);
    foreach ($nodes as $nid => $node) {
      //set location
      $locationTitle = _getLocation($node->field_event_location[LANGUAGE_NONE][0]['nid']);
      // set date
      $dateTitle = _getDate($node->field_event_date[LANGUAGE_NONE][0]['value']);

      $out .= '<div class="col-sm-9"><p><strong>' . l($node->title, 'node/' . $nid) . '</strong><br>Location: ' . $locationTitle . '<br>Date: ' . $dateTitle . '</p></div><div class="col-sm-3">' . brSeminarBooking_waitinglist_link((object) array('nid' => $nid)) . '</div>';
    }

    $out .= '<div class="clearfix"></div></div>';
    $out .= '<p>Please remove any seminars you are no longer interested in.</p>';
    $wlform = drupal_get_form('brSeminarBooking_waitinglist_form');
    $out .= render($wlform);
  }
  else {
    $out .= 'No seminars on the waiting list yet';
  }
  $out .= '</div>';

  return $out;
}

function brSeminarBooking_waitinglist_form($form, &$form_state) {
  $form['intro'] = array('#markup' => '<hr><h2>Your Details</h2><p>Please fill in the form below and we\'ll place you on our seminar waiting list. We will inform you as soon as possible if a space arises.</p><p>Fields marked with <span class="form-required">*</span> are required.</p>');
  $form['#attributes'] = array('class' => 'custom-seminar-form');
  $form['first-name'] = array(
    '#type' => 'textfield',
    '#title' => 'First name',
    // '#default_value' => 'First name',
    '#required' => TRUE,
    '#weight' => 10,
  );

  $form['surname'] = array(
    '#type' => 'textfield',
    '#title' => 'Surname',
    //  '#default_value' => 'Surname',
    '#required' => TRUE,
    '#weight' => 20,
  );

  $form['company'] = array(
    '#type' => 'textfield',
    '#title' => 'Company',
    //  '#default_value' => 'Company',
    '#required' => TRUE,
    '#weight' => 30,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => 'Email',
//    '#default_value' => 'test@test.com',
    '#required' => TRUE,
    '#weight' => 40,
  );

  $form['telephone-number'] = array(
    '#type' => 'textfield',
    '#title' => 'Telephone Number',
//    '#default_value' => 'Telephone Number',
    '#required' => TRUE,
    '#weight' => 50,
  );

//  $form['captcha'] = array(
//    '#type' => 'captcha',
//    '#captcha_type' => 'image_captcha/Image',
//    '#title' => '',
//    '#weight' => 70,
//  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#weight' => 80,
  );
  return $form;
}

function brSeminarBooking_waitinglist_form_validate($form_state, $form_values) {
  $email = $form_values['values']['email'];

  if (!valid_email_address($email)) {
    form_set_error('email', 'Enter valid email address');
  }
}

function brSeminarBooking_waitinglist_form_submit($form_state, $form_values) {
  if (SEMINAR_EMAIL_TEST == true) {
    $admin_email = 'callum@sakurabrae.co.uk';
  }
  else {
    $admin_email = 'contact@brodies.com';
  }

  global $user;
  $values = $form_values['values'];

//send email
//$form_values['values']['submission-time'] = date("Y-m-d H:i", time());
  $from = $values['email'];
  $out = '';
  $out .= '<!DOCTYPE html><html><head><title>Seminar Waiting List</title></head><body>';
  $out .= $values['first-name'] . " " . $values['surname'] . " from IP address " . $_SERVER['REMOTE_ADDR'] . "on " . date("Y-m-d H:i", time()) . " requests to be added to the following seminar waiting lists:";
  $out .= "<table border='1'><tr><td>Name</td><td>Location</td><td>Time & Date</td><td>Places</td></tr>";

  $nodes = node_load_multiple($_SESSION['seminars-waitinglist']);
  foreach ($nodes as $row) {
    //set location
    $locationTitle = _getLocation($row->field_event_location[LANGUAGE_NONE][0]['nid']);
    // set date
    $dateTitle = _getDate($row->field_event_date[LANGUAGE_NONE][0]['value']);

    $out .= "<tr>";
    $out .= "<td>" . l($row->title, 'node/' . $row->nid, array('absolute' => TRUE)) . "</td>";
    $out .= "<td>" . $locationTitle . "</td>";
    $out .= "<td>" . $dateTitle;
    if (isset($row->field_event_date[LANGUAGE_NONE][0]['value2'])) {
      $out .= ' - ' . date('d M Y H:i', $row->field_event_date[LANGUAGE_NONE][0]['value2']);
    }
    $out .= "</td>";
    $out .= "<td>1</td></tr>";
  }


  $out .= '</table><br><br>
  <b>Lead Delegate</b><br>
<br>
<table border="1" width="100%">
<tbody>
<tr>
<td width="50%">Name:</td>
<td width="50%">' . $values['first-name'] . " " . $values['surname'] . '</td>
</tr>
<tr>
<td>Email:</td>
<td>' . $values['email'] . '</td>
</tr>
<tr>
<td>Contact Telephone Number:</td>
<td>' . $values['telephone-number'] . '</td>
</tr>
<tr>
<td>Company:</td>
<td>' . $values['company'] . '</td>
</tr>
</tbody>
</table></body></html>';
  $params = array(
    'body' => $out,
    'subject' => 'Seminar Waiting List Request',
  );

  if (drupal_mail('brSeminarBooking_waitinglist_form', 'seminars-waitinglist-admin', $admin_email, language_default(), $params, $from, TRUE)) {
    unset($_SESSION['seminars-waitinglist']);
//redirect to thank you
    $_REQUEST['destination'] = 'thank-you-waiting-list';
    drupal_goto('thank-you-waiting-list');
  }
  else {
    drupal_set_message('There was an error subscribing you. Please try again later');
  }
}

function brSeminarBooking_waitinglist_form_mail($key, &$message, $params) {
  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8;',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal'
  );

  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

function brSeminarBooking_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'event' && $view_mode == 'full' && !(empty($node->field_event_date[LANGUAGE_NONE][0]['value']))) {
    if (!empty($_GET['calendar'])) {
      $cal_dtstart = brSeminar_dateToCal($node->field_event_date[LANGUAGE_NONE][0]['value']);
      $cal_dtend = brSeminar_dateToCal($node->field_event_date[LANGUAGE_NONE][0]['value2']);
      $cal_uid = $node->uid;
      $cal_location = brSeminar_escapeString(strip_tags(nl2br($node->field_event_l_details[LANGUAGE_NONE][0]['value'])));
      //$cal_description = brSeminar_escapeString(strip_tags(nl2br($node->teaser)));
      $cal_description = '';
      $cal_url = brSeminar_escapeString(url($_GET['q'], array('absolute' => TRUE)));
      $cal_summary = brSeminar_escapeString(strip_tags(nl2br($node->title)));
      if ($_GET['calendar'] == 'ical') {
        header('Content-type: text/calendar; charset=utf-8');
        header('Content-Disposition: attachment; filename=ical.ics');
        print
            'BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//hacksw/handcal//NONSGML v1.0//EN
CALSCALE:GREGORIAN
BEGIN:VEVENT
DTSTART:' . $cal_dtstart . '
DTEND:' . $cal_dtend . '
UID:' . $cal_uid . '
DTSTAMP:' . $cal_dtstart . '
LOCATION:' . $cal_location . '
DESCRIPTION:' . $cal_description . '
URL;VALUE=URI:' . $cal_url . '
SUMMARY:' . $cal_summary . '
END:VEVENT
END:VCALENDAR';
        exit();
      }

      if ($_GET['calendar'] == 'vcal') {
        header("Content-Type: text/x-vCalendar");
        header("Content-Disposition: inline; filename=vcal.vcs");
        print
            'BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//hacksw/handcal//NONSGML v1.0//EN
CALSCALE:GREGORIAN
BEGIN:VEVENT
DTSTART:' . $cal_dtstart . '
DTEND:' . $cal_dtend . '
UID:' . $cal_uid . '
DTSTAMP:' . $cal_dtstart . '
LOCATION:' . $cal_location . '
DESCRIPTION:' . $cal_description . '
URL;VALUE=URI:' . $cal_url . '
SUMMARY:' . $cal_summary . '
END:VEVENT
END:VCALENDAR';
        exit();
      }
    }
  }
}

function brSeminar_dateToCal($timestamp) {
  //return date('Ymd\THis\Z', $timestamp);
  return date('Ymd\THis', $timestamp);
}

function brSeminar_escapeString($string) {
  return preg_replace('/([\,;])/', '\\\$1', $string);
}

function brSeminarBooking_calendar_links() {
  $calendar_links = '';
  $nidArray = explode('/', $_GET['q']);
  $node = node_load($nidArray[1]);
  if (!empty($node->field_event_date[LANGUAGE_NONE][0]['value'])) {
    $calendar_links .= '<div class="calendars seminar-buttons col-md-3 no-padding-left-md">'
        . '<div class="seminar-button calendar-link">'
        . l('iCalendar', $_GET['q'], array('query' => array('calendar' => 'ical')))
        . '</div></div>'
        . '<div class="calendars seminar-buttons col-md-3 no-padding-right-md">'
        . '<div class="seminar-button calendar-link">'
        . l('vCalendar', $_GET['q'], array('query' => array('calendar' => 'vcal')))
        . '</div></div>';
  }
  return $calendar_links;
}

function _getLocation($locationInput) {
  $locationOut = 'TBC';
  if (!(empty($locationInput))) {
    $location = node_load($locationInput);
    if (!$location == false) {
      $locationOut = $location->title;
    }
  }
  return $locationOut;
}

function _getDate($dateInput) {
  $dateOut = 'TBC';
  if (!(empty($dateInput))) {
    $dateOut = format_date($dateInput, 'brodies_date_only_long_');
  }
  return $dateOut;
}
